// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String           @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  user                User             @relation(fields: [userId], references: [id], onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                  String           @id @default(cuid())
  sessionToken        String           @unique
  userId              String
  expires             DateTime
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  username            String?          @unique
  email               String           @unique
  emailVerified       DateTime?
  isActive            Boolean          @default(true)
  image               String?
  profile             Json?
  role                String           @default("")   // "", "SUPER_ADMIN", "ADMIN", "RESELLER", "PARTNER", "INVESTOR"
  createdAt           DateTime         @default(now())
  updateAt            DateTime         @updatedAt

  accounts            Account[]
  sessions            Session[]
  userRole            UserRole         @relation(fields: [role], references: [name], onUpdate: Cascade)
  credentialAccount   CredentialAccount?
  // userPermission    UserPermission[]
}

model UserRole {
  id                  String            @id @default(cuid())
  name                String            @unique
  createdAt           DateTime          @default(now())

  permissions         Permission[]      @relation("RolePermission")
  users               User[]
}

model Permission {
  id                  String            @id @default(cuid())
  name                String            @unique
  createdAt           DateTime          @default(now())

  userRole            UserRole[]        @relation("RolePermission")
}

// -- Additional

model CredentialAccount {
  id                  String            @id @default(cuid())
  userId              String            @unique
  password            String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  verificationToken   VerificationToken?
  user                User              @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id                  String            @id @default(cuid())
  email               String            @unique
  isVerified          Boolean           @default(false)
  token               String            @unique @default(cuid())
  code                String            @default(dbgenerated("FLOOR(RANDOM()*1000000)")) // Postgres
  expires             DateTime          @default(dbgenerated("CURRENT_DATE + INTERVAL '12 HOUR'")) // Postgres
  // code             String            @default(dbgenerated("LEFT(CAST(RAND()*1000000000 AS INT),6)"))  // Mysql
  // expires          DateTime          @default(dbgenerated("DATE_ADD(NOW(), INTERVAL 12 HOUR)"))  // Mysql
  createdAt           DateTime          @default(now())

  credentialAccount   CredentialAccount @relation(fields: [credentialAccountId], references: [id], onDelete: Cascade)
  credentialAccountId String            @unique
}